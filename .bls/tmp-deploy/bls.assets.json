{
  "/breadboard.js": "data:application/javascript;base64,",
  "/browser-emulator.js": "data:application/javascript;base64,",
  "/emulator.js": "data:application/javascript;base64,Y29uc3QgewogICAgTERBLCBTVEEsIExEWCwgU1RYLCBBREQsIFNVQiwgSU5DLCBERUMsCiAgICBCUkEsIEJFUSwgQk5FLCBOT1AsIEFORCwgT1JBLCBFT1IsIFJPTCwgUk9SCn0gPSByZXF1aXJlKCcuL2luc3RydWN0aW9ucycpOwoKY2xhc3MgTTY4MDAgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgdGhpcy5wYyA9IDA7ICAvLyBQcm9ncmFtIENvdW50ZXIKICAgICAgICB0aGlzLnNwID0gMHhGRkZGOyAgLy8gU3RhY2sgUG9pbnRlcgogICAgICAgIHRoaXMuYSA9IDA7ICAgLy8gQWNjdW11bGF0b3IgQQogICAgICAgIHRoaXMuYiA9IDA7ICAgLy8gQWNjdW11bGF0b3IgQgogICAgICAgIHRoaXMueCA9IDA7ICAgLy8gSW5kZXggUmVnaXN0ZXIgWAogICAgICAgIHRoaXMuY2MgPSB7ICAgLy8gQ29uZGl0aW9uIENvZGVzCiAgICAgICAgICAgIHo6IGZhbHNlLCAvLyBaZXJvCiAgICAgICAgICAgIG46IGZhbHNlLCAvLyBOZWdhdGl2ZQogICAgICAgICAgICBoOiBmYWxzZSwgLy8gSGFsZi1jYXJyeQogICAgICAgICAgICBpOiBmYWxzZSwgLy8gSW50ZXJydXB0IE1hc2sKICAgICAgICAgICAgYzogZmFsc2UgIC8vIENhcnJ5CiAgICAgICAgfTsKICAgICAgICB0aGlzLm1lbW9yeSA9IG5ldyBVaW50OEFycmF5KDY1NTM2KTsgIC8vIDY0S0Igb2YgbWVtb3J5CiAgICB9CgogICAgLy8gTWV0aG9kIHRvIHJlc2V0IHRoZSBDUFUgc3RhdGUKICAgIHJlc2V0KCkgewogICAgICAgIHRoaXMucGMgPSAweEZGRkU7CiAgICAgICAgdGhpcy5zcCA9IDB4RkZGRjsKICAgICAgICB0aGlzLmEgPSAwOwogICAgICAgIHRoaXMuYiA9IDA7CiAgICAgICAgdGhpcy54ID0gMDsKICAgICAgICB0aGlzLmNjID0geyB6OiBmYWxzZSwgbjogZmFsc2UsIGg6IGZhbHNlLCBpOiBmYWxzZSwgYzogZmFsc2UgfTsKICAgIH0KCiAgICAvLyBNZXRob2QgdG8gbG9hZCBhIHByb2dyYW0gaW50byBtZW1vcnkKICAgIGxvYWQocHJvZ3JhbSwgc3RhcnRBZGRyZXNzKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9ncmFtLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMubWVtb3J5W3N0YXJ0QWRkcmVzcyArIGldID0gcHJvZ3JhbVtpXTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wYyA9IHN0YXJ0QWRkcmVzczsgIC8vIFNldCB0aGUgcHJvZ3JhbSBjb3VudGVyIHRvIHRoZSBzdGFydCBhZGRyZXNzIG9mIHRoZSBwcm9ncmFtCiAgICB9CgogICAgLy8gRmV0Y2gsIERlY29kZSwgRXhlY3V0ZSBjeWNsZQogICAgcnVuKCkgewogICAgICAgIGxldCBydW5uaW5nID0gdHJ1ZTsKCiAgICAgICAgd2hpbGUgKHJ1bm5pbmcpIHsKICAgICAgICAgICAgLy8gRm9yIGRlYnVnZ2luZwogICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgUEM6ICR7dGhpcy5wYy50b1N0cmluZygxNil9LCBBOiAke3RoaXMuYS50b1N0cmluZygxNil9LCBCOiAke3RoaXMuYi50b1N0cmluZygxNil9LCBYOiAke3RoaXMueC50b1N0cmluZygxNil9YCk7CgogICAgICAgICAgICAvLyBGZXRjaCB0aGUgb3Bjb2RlCiAgICAgICAgICAgIGNvbnN0IG9wY29kZSA9IHRoaXMubWVtb3J5W3RoaXMucGMrK107CgogICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBpbnN0cnVjdGlvbgogICAgICAgICAgICB0aGlzLmV4ZWN1dGUob3Bjb2RlKTsKCiAgICAgICAgICAgIC8vIEV4YW1wbGUgc3RvcHBpbmcgY29uZGl0aW9uIG9yIGJyZWFrcG9pbnQKICAgICAgICAgICAgaWYgKG9wY29kZSA9PT0gMHgwMSkgeyAgLy8gTk9QIGNhbiBiZSB1c2VkIGFzIGEgc3RvcHBpbmcgcG9pbnQKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJFeGVjdXRpb24gY29tcGxldGUgKHJlYWNoZWQgTk9QKSIpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZpbmFsIHN0YXRlOiBQQz0ke3RoaXMucGMudG9TdHJpbmcoMTYpfSwgQT0ke3RoaXMuYS50b1N0cmluZygxNil9LCBCPSR7dGhpcy5iLnRvU3RyaW5nKDE2KX0sIFg9JHt0aGlzLngudG9TdHJpbmcoMTYpfWApOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE1lbW9yeSBhdCAweDEwOiAke3RoaXMubWVtb3J5WzB4MTBdLnRvU3RyaW5nKDE2KX0sIE1lbW9yeSBhdCAweDIwOiAke3RoaXMubWVtb3J5WzB4MjBdLnRvU3RyaW5nKDE2KX1gKTsKICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBEZWNvZGluZyBhbmQgZXhlY3V0aW5nIHRoZSBpbnN0cnVjdGlvbgogICAgZXhlY3V0ZShvcGNvZGUpIHsKICAgICAgICBzd2l0Y2ggKG9wY29kZSkgewogICAgICAgICAgICBjYXNlIDB4ODY6IC8vIExEQSBJbW1lZGlhdGUKICAgICAgICAgICAgICAgIExEQSh0aGlzLCB0aGlzLnBjKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4OTc6IC8vIFNUQSBEaXJlY3QKICAgICAgICAgICAgICAgIFNUQSh0aGlzLCB0aGlzLm1lbW9yeVt0aGlzLnBjXSk7CiAgICAgICAgICAgICAgICB0aGlzLnBjKys7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDhFOiAvLyBMRFggSW1tZWRpYXRlCiAgICAgICAgICAgICAgICBMRFgodGhpcywgdGhpcy5wYyk7CiAgICAgICAgICAgICAgICB0aGlzLnBjICs9IDI7IC8vIFggcmVnaXN0ZXIgaXMgMTYtYml0LCBzbyB3ZSBuZWVkIHRvIGluY3JlbWVudCBQQyBieSAyCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDEwOiAvLyBTVFggRGlyZWN0CiAgICAgICAgICAgICAgICBTVFgodGhpcywgdGhpcy5tZW1vcnlbdGhpcy5wY10pOwogICAgICAgICAgICAgICAgdGhpcy5wYysrOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMHg2QjogLy8gQUREIERpcmVjdAogICAgICAgICAgICAgICAgQUREKHRoaXMsIHRoaXMubWVtb3J5W3RoaXMucGNdKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4OTA6IC8vIFNVQiBEaXJlY3QKICAgICAgICAgICAgICAgIFNVQih0aGlzLCB0aGlzLm1lbW9yeVt0aGlzLnBjXSk7CiAgICAgICAgICAgICAgICB0aGlzLnBjKys7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDFDOiAvLyBJTkMgRGlyZWN0CiAgICAgICAgICAgICAgICBJTkModGhpcywgdGhpcy5tZW1vcnlbdGhpcy5wY10pOwogICAgICAgICAgICAgICAgdGhpcy5wYysrOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMHgxQTogLy8gREVDIERpcmVjdAogICAgICAgICAgICAgICAgREVDKHRoaXMsIHRoaXMubWVtb3J5W3RoaXMucGNdKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4MjA6IC8vIEJSQQogICAgICAgICAgICAgICAgQlJBKHRoaXMsIHRoaXMubWVtb3J5W3RoaXMucGNdKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4Mjc6IC8vIEJFUQogICAgICAgICAgICAgICAgQkVRKHRoaXMsIHRoaXMubWVtb3J5W3RoaXMucGNdKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4MjY6IC8vIEJORQogICAgICAgICAgICAgICAgQk5FKHRoaXMsIHRoaXMubWVtb3J5W3RoaXMucGNdKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4MDE6IC8vIE5PUAogICAgICAgICAgICAgICAgTk9QKCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDI0OiAvLyBBTkQgRGlyZWN0CiAgICAgICAgICAgICAgICBBTkQodGhpcywgdGhpcy5tZW1vcnlbdGhpcy5wY10pOwogICAgICAgICAgICAgICAgdGhpcy5wYysrOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMHgyQTogLy8gT1JBIERpcmVjdAogICAgICAgICAgICAgICAgT1JBKHRoaXMsIHRoaXMubWVtb3J5W3RoaXMucGNdKTsKICAgICAgICAgICAgICAgIHRoaXMucGMrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4Mjg6IC8vIEVPUiBEaXJlY3QKICAgICAgICAgICAgICAgIEVPUih0aGlzLCB0aGlzLm1lbW9yeVt0aGlzLnBjXSk7CiAgICAgICAgICAgICAgICB0aGlzLnBjKys7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDJCOiAvLyBST0wKICAgICAgICAgICAgICAgIFJPTCh0aGlzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4MkU6IC8vIFJPUgogICAgICAgICAgICAgICAgUk9SKHRoaXMpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBVbmltcGxlbWVudGVkIG9wY29kZTogJHtvcGNvZGUudG9TdHJpbmcoMTYpfWApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IE02ODAwOwo=",
  "/example.txt": "data:text/plain;base64,ODYgMDUKOTcgMTAKODYgMDMKNkIgMTAKMjcgMDEKOTcgMjAKMDEK",
  "/index.html": "data:text/html;base64,",
  "/instructions.js": "data:application/javascript;base64,Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIHNldCBjb25kaXRpb24gY29kZXMgYmFzZWQgb24gdGhlIHJlc3VsdApmdW5jdGlvbiBzZXRDQyhjcHUsIHJlc3VsdCwgdXBkYXRlQ2FycnkgPSBmYWxzZSkgewogICAgY3B1LmNjLnogPSAocmVzdWx0ICYgMHhGRikgPT09IDA7ICAvLyBaZXJvIGZsYWcKICAgIGNwdS5jYy5uID0gKHJlc3VsdCAmIDB4ODApICE9PSAwOyAgLy8gTmVnYXRpdmUgZmxhZwogICAgaWYgKHVwZGF0ZUNhcnJ5KSB7CiAgICAgICAgY3B1LmNjLmMgPSAocmVzdWx0ID4gMHhGRik7ICAgIC8vIENhcnJ5IGZsYWcKICAgIH0KfQoKLy8gTG9hZCBBY2N1bXVsYXRvciBBIGZyb20gTWVtb3J5CmZ1bmN0aW9uIExEQShjcHUsIGFkZHJlc3MpIHsKICAgIGNwdS5hID0gY3B1Lm1lbW9yeVthZGRyZXNzXTsKICAgIHNldENDKGNwdSwgY3B1LmEpOwp9CgovLyBTdG9yZSBBY2N1bXVsYXRvciBBIGludG8gTWVtb3J5CmZ1bmN0aW9uIFNUQShjcHUsIGFkZHJlc3MpIHsKICAgIGNwdS5tZW1vcnlbYWRkcmVzc10gPSBjcHUuYTsKICAgIHNldENDKGNwdSwgY3B1LmEpOwp9CgovLyBMb2FkIEluZGV4IFJlZ2lzdGVyIFggZnJvbSBNZW1vcnkKZnVuY3Rpb24gTERYKGNwdSwgYWRkcmVzcykgewogICAgY3B1LnggPSAoY3B1Lm1lbW9yeVthZGRyZXNzXSA8PCA4KSB8IGNwdS5tZW1vcnlbYWRkcmVzcyArIDFdOwogICAgc2V0Q0MoY3B1LCBjcHUueCA+PiA4KTsgLy8gU2V0IGNvbmRpdGlvbiBjb2RlcyBiYXNlZCBvbiBoaWdoIGJ5dGUKfQoKLy8gU3RvcmUgSW5kZXggUmVnaXN0ZXIgWCBpbnRvIE1lbW9yeQpmdW5jdGlvbiBTVFgoY3B1LCBhZGRyZXNzKSB7CiAgICBjcHUubWVtb3J5W2FkZHJlc3NdID0gKGNwdS54ID4+IDgpICYgMHhGRjsKICAgIGNwdS5tZW1vcnlbYWRkcmVzcyArIDFdID0gY3B1LnggJiAweEZGOwp9CgovLyBBZGQgTWVtb3J5IHRvIEFjY3VtdWxhdG9yIEEKZnVuY3Rpb24gQUREKGNwdSwgYWRkcmVzcykgewogICAgY29uc3QgcmVzdWx0ID0gY3B1LmEgKyBjcHUubWVtb3J5W2FkZHJlc3NdOwogICAgY3B1LmEgPSByZXN1bHQgJiAweEZGOwogICAgc2V0Q0MoY3B1LCByZXN1bHQsIHRydWUpOwp9CgovLyBTdWJzdHJhY3QgTWVtb3J5IGZyb20gQWNjdW11bGF0b3IgQQpmdW5jdGlvbiBTVUIoY3B1LCBhZGRyZXNzKSB7CiAgICBjb25zdCByZXN1bHQgPSBjcHUuYSAtIGNwdS5tZW1vcnlbYWRkcmVzc107CiAgICBjcHUuYSA9IHJlc3VsdCAmIDB4RkY7CiAgICBzZXRDQyhjcHUsIHJlc3VsdCwgdHJ1ZSk7Cn0KCi8vIEluY3JlbWVudCBNZW1vcnkKZnVuY3Rpb24gSU5DKGNwdSwgYWRkcmVzcykgewogICAgY29uc3QgcmVzdWx0ID0gY3B1Lm1lbW9yeVthZGRyZXNzXSArIDE7CiAgICBjcHUubWVtb3J5W2FkZHJlc3NdID0gcmVzdWx0ICYgMHhGRjsKICAgIHNldENDKGNwdSwgcmVzdWx0KTsKfQoKLy8gRGVjcmVtZW50IE1lbW9yeQpmdW5jdGlvbiBERUMoY3B1LCBhZGRyZXNzKSB7CiAgICBjb25zdCByZXN1bHQgPSBjcHUubWVtb3J5W2FkZHJlc3NdIC0gMTsKICAgIGNwdS5tZW1vcnlbYWRkcmVzc10gPSByZXN1bHQgJiAweEZGOwogICAgc2V0Q0MoY3B1LCByZXN1bHQpOwp9CgovLyBCcmFuY2ggQWx3YXlzCmZ1bmN0aW9uIEJSQShjcHUsIG9mZnNldCkgewogICAgLy8gVHJlYXQgdGhlIG9mZnNldCBhcyBhIHNpZ25lZCA4LWJpdCB2YWx1ZQogICAgY29uc3Qgc2lnbmVkT2Zmc2V0ID0gb2Zmc2V0ICYgMHg4MCA/IChvZmZzZXQgLSAyNTYpIDogb2Zmc2V0OwogICAgY3B1LnBjICs9IHNpZ25lZE9mZnNldDsKfQoKLy8gQnJhbmNoIGlmIFplcm8KZnVuY3Rpb24gQkVRKGNwdSwgb2Zmc2V0KSB7CiAgICBpZiAoY3B1LmNjLnopIHsKICAgICAgICBjb25zdCBzaWduZWRPZmZzZXQgPSBvZmZzZXQgJiAweDgwID8gKG9mZnNldCAtIDI1NikgOiBvZmZzZXQ7CiAgICAgICAgY3B1LnBjICs9IHNpZ25lZE9mZnNldDsKICAgIH0KfQoKLy8gQnJhbmNoIGlmIE5vdCBaZXJvCmZ1bmN0aW9uIEJORShjcHUsIG9mZnNldCkgewogICAgaWYgKCFjcHUuY2MueikgewogICAgICAgIGNvbnN0IHNpZ25lZE9mZnNldCA9IG9mZnNldCAmIDB4ODAgPyAob2Zmc2V0IC0gMjU2KSA6IG9mZnNldDsKICAgICAgICBjcHUucGMgKz0gc2lnbmVkT2Zmc2V0OwogICAgfQp9CgovLyBObyBPcGVyYXRpb24KZnVuY3Rpb24gTk9QKCkgewogICAgLy8gRG9lcyBub3RoaW5nCn0KCi8vIExvZ2ljYWwgQU5EIE1lbW9yeSB3aXRoIEFjY3VtdWxhdG9yCmZ1bmN0aW9uIEFORChjcHUsIGFkZHJlc3MpIHsKICAgIGNwdS5hICY9IGNwdS5tZW1vcnlbYWRkcmVzc107CiAgICBzZXRDQyhjcHUsIGNwdS5hKTsKfQoKLy8gTG9naWNhbCBPUiBNZW1vcnkgd2l0aCBBY2N1bXVsYXRvcgpmdW5jdGlvbiBPUkEoY3B1LCBhZGRyZXNzKSB7CiAgICBjcHUuYSB8PSBjcHUubWVtb3J5W2FkZHJlc3NdOwogICAgc2V0Q0MoY3B1LCBjcHUuYSk7Cn0KCi8vIExvZ2ljYWwgRXhjbHVzaXZlIE9SIE1lbW9yeSB3aXRoIEFjY3VtdWxhdG9yCmZ1bmN0aW9uIEVPUihjcHUsIGFkZHJlc3MpIHsKICAgIGNwdS5hIF49IGNwdS5tZW1vcnlbYWRkcmVzc107CiAgICBzZXRDQyhjcHUsIGNwdS5hKTsKfQoKLy8gUm90YXRlIExlZnQgQWNjdW11bGF0b3IgQQpmdW5jdGlvbiBST0woY3B1KSB7CiAgICBsZXQgcmVzdWx0ID0gKGNwdS5hIDw8IDEpIHwgKGNwdS5jYy5jID8gMSA6IDApOwogICAgY3B1LmNjLmMgPSAoY3B1LmEgJiAweDgwKSAhPT0gMDsKICAgIGNwdS5hID0gcmVzdWx0ICYgMHhGRjsKICAgIHNldENDKGNwdSwgcmVzdWx0KTsKfQoKLy8gUm90YXRlIFJpZ2h0IEFjY3VtdWxhdG9yIEEKZnVuY3Rpb24gUk9SKGNwdSkgewogICAgbGV0IHJlc3VsdCA9IChjcHUuYSA+PiAxKSB8IChjcHUuY2MuYyA/IDB4ODAgOiAwKTsKICAgIGNwdS5jYy5jID0gKGNwdS5hICYgMSkgIT09IDA7CiAgICBjcHUuYSA9IHJlc3VsdCAmIDB4RkY7CiAgICBzZXRDQyhjcHUsIHJlc3VsdCk7Cn0KCi8vIEV4cG9ydCB0aGUgaW5zdHJ1Y3Rpb24gaGFuZGxlcnMKbW9kdWxlLmV4cG9ydHMgPSB7CiAgICBMREEsIFNUQSwgTERYLCBTVFgsIEFERCwgU1VCLCBJTkMsIERFQywgQlJBLCBCRVEsIEJORSwgTk9QLAogICAgQU5ELCBPUkEsIEVPUiwgUk9MLCBST1IKfTsK",
  "/main.js": "data:application/javascript;base64,Y29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwpjb25zdCBNNjgwMCA9IHJlcXVpcmUoJy4vZW11bGF0b3InKTsKCi8vIEZ1bmN0aW9uIHRvIGxvYWQgcHJvZ3JhbSBmcm9tIGEgZmlsZQpmdW5jdGlvbiBsb2FkUHJvZ3JhbUZyb21GaWxlKGNwdSwgZmlsZVBhdGgpIHsKICAgIHRyeSB7CiAgICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTsKICAgICAgICBjb25zb2xlLmxvZyhgTG9hZGluZyBwcm9ncmFtIGZyb20gJHtmaWxlUGF0aH1gKTsKCiAgICAgICAgLy8gRmlsdGVyIG91dCBhbnkgbm9uLWhleCBjaGFyYWN0ZXJzIGFuZCBwYXJzZSBlYWNoIGJ5dGUKICAgICAgICBjb25zdCBwcm9ncmFtID0gZGF0YS5zcGxpdCgvXHMrLykKICAgICAgICAgICAgLmZpbHRlcihieXRlID0+IC9eWzAtOUEtRmEtZl0rJC8udGVzdChieXRlKSkKICAgICAgICAgICAgLm1hcChieXRlID0+IHBhcnNlSW50KGJ5dGUsIDE2KSk7CgogICAgICAgIGNvbnNvbGUubG9nKGBQcm9ncmFtIGxvYWRlZDogJHtwcm9ncmFtLm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJyAnKX1gKTsKICAgICAgICBjcHUubG9hZChwcm9ncmFtLCAweDAwMDApOyAgLy8gTG9hZCBwcm9ncmFtIGF0IG1lbW9yeSBhZGRyZXNzIDB4MDAwMAogICAgICAgIHJldHVybiBwcm9ncmFtLmxlbmd0aDsKICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIkZhaWxlZCB0byByZWFkIHRoZSBmaWxlOiIsIGVycik7CiAgICAgICAgcHJvY2Vzcy5leGl0KDEpOwogICAgfQp9CgovLyBNYWluIGZ1bmN0aW9uIHRvIHNldHVwIGFuZCBydW4gdGhlIGVtdWxhdG9yCmZ1bmN0aW9uIG1haW4oKSB7CiAgICBjb25zdCBjcHUgPSBuZXcgTTY4MDAoKTsKICAgIGNwdS5yZXNldCgpOwoKICAgIGlmIChwcm9jZXNzLmFyZ3YubGVuZ3RoIDwgMykgewogICAgICAgIGNvbnNvbGUubG9nKCJVc2FnZTogbm9kZSBtYWluLmpzIDxwYXRoX3RvX3Byb2dyYW1fZmlsZT4iKTsKICAgICAgICBwcm9jZXNzLmV4aXQoMSk7CiAgICB9CgogICAgY29uc3QgcHJvZ3JhbVBhdGggPSBwcm9jZXNzLmFyZ3ZbMl07CiAgICBjb25zdCBwcm9ncmFtU2l6ZSA9IGxvYWRQcm9ncmFtRnJvbUZpbGUoY3B1LCBwcm9ncmFtUGF0aCk7CgogICAgY29uc29sZS5sb2coIkluaXRpYWwgc3RhdGU6Iik7CiAgICBjb25zb2xlLmxvZyhgUEM6ICR7Y3B1LnBjLnRvU3RyaW5nKDE2KX1gKTsKICAgIGNvbnNvbGUubG9nKGBBOiAke2NwdS5hLnRvU3RyaW5nKDE2KX0sIEI6ICR7Y3B1LmIudG9TdHJpbmcoMTYpfSwgWDogJHtjcHUueC50b1N0cmluZygxNil9YCk7CiAgICBjb25zb2xlLmxvZygiU3RhcnRpbmcgZW11bGF0aW9uLi4uIik7CgogICAgY3B1LnJ1bigpOwoKICAgIGNvbnNvbGUubG9nKCJNZW1vcnkgZHVtcCBvZiBrZXkgbG9jYXRpb25zOiIpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCAweDMwOyBpICs9IDE2KSB7CiAgICAgICAgY29uc29sZS5sb2coYCR7aS50b1N0cmluZygxNikucGFkU3RhcnQoNCwgJzAnKX06ICR7QXJyYXkuZnJvbSh7IGxlbmd0aDogMTYgfSwgKF8sIGopID0+CiAgICAgICAgICAgIGNwdS5tZW1vcnlbaSArIGpdLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcgJyl9YCk7CiAgICB9Cn0KCm1haW4oKTsK",
  "/styles.css": "data:text/css;base64,"
}